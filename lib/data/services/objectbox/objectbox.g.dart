// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../data/entities/account_payable.dart';
import '../../../data/entities/bulk_sale_entity.dart';
import '../../../data/entities/customer_entity.dart';
import '../../../data/entities/product_entity.dart';
import '../../../data/entities/sale_history_entity.dart';
import '../../../data/entities/sale_status_entity.dart';
import '../../../data/entities/single_sale_entity.dart';
import '../../../data/entities/supplier_entity.dart';
import '../../../data/entities/supplier_history_entity.dart';
import '../../../data/entities/supplier_status_entity.dart';
import '../../../data/entities/vendor_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7914251497072506869),
    name: 'AccountPayableEntity',
    lastPropertyId: const obx_int.IdUid(5, 3200025633739139271),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4088265078535156107),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 674698552551355689),
        name: 'paid',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6037924707231255431),
        name: 'supplierId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 3481637770598506471),
        relationTarget: 'SupplierEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3745736992779060173),
        name: 'bulkSaleId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 6638121953838026360),
        relationTarget: 'CustomerEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3200025633739139271),
        name: 'statusId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 291728403307348676),
        relationTarget: 'SupplierStatusEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4905261784753417259),
    name: 'BulkSaleEntity',
    lastPropertyId: const obx_int.IdUid(5, 7968422011454426797),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5712679668284678685),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1946523445621564605),
        name: 'paid',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5315824630564795273),
        name: 'customerId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 2023178944544051985),
        relationTarget: 'CustomerEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2931490804305699336),
        name: 'vendorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 6234528619108568738),
        relationTarget: 'VendorEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7968422011454426797),
        name: 'statusId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 6172419015569186288),
        relationTarget: 'SaleStatusEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3558694468294062902),
    name: 'CustomerEntity',
    lastPropertyId: const obx_int.IdUid(2, 7455160796829320534),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6123189538203864415),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7455160796829320534),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 338849023576786423),
    name: 'ProductEntity',
    lastPropertyId: const obx_int.IdUid(5, 3174088211387151818),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8303614801398571757),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4236801951377903932),
        name: 'code',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(7, 6073793260266859543),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5345030253619610831),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1141329764556913151),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3174088211387151818),
        name: 'donation',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 5117203143809924064),
    name: 'SaleHistoryEntity',
    lastPropertyId: const obx_int.IdUid(5, 6272532819927661549),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1045383930045611956),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5749824717674261100),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4138564143435715712),
        name: 'bulkSaleId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(8, 297688410611438588),
        relationTarget: 'BulkSaleEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2113877130240476319),
        name: 'previousStatusId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(9, 2417037232762816614),
        relationTarget: 'SaleStatusEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6272532819927661549),
        name: 'subsequentStatusId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(10, 439670335770899977),
        relationTarget: 'SaleStatusEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 3049969031068259753),
    name: 'SaleStatusEntity',
    lastPropertyId: const obx_int.IdUid(2, 8158525935487908107),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1213886762018715397),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8158525935487908107),
        name: 'description',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 7098269914499952747),
    name: 'SingleSaleEntity',
    lastPropertyId: const obx_int.IdUid(4, 4042251732334351162),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3342314088848747738),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4484013064051296189),
        name: 'amount',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1490652257613150742),
        name: 'productId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(11, 7198919136860806251),
        relationTarget: 'ProductEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4042251732334351162),
        name: 'bulkSaleId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(12, 1475885073662031417),
        relationTarget: 'BulkSaleEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 7957991900381472199),
    name: 'SupplierEntity',
    lastPropertyId: const obx_int.IdUid(2, 7942656241232936638),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7847765308880294001),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7942656241232936638),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 1312191794756667347),
    name: 'SupplierHistoryEntity',
    lastPropertyId: const obx_int.IdUid(5, 3632915326898435017),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 494690218340831362),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6623936720752618657),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7473528359420423076),
        name: 'previousStatusId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(13, 8741790396409240828),
        relationTarget: 'SupplierStatusEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6204511507248454596),
        name: 'subsequentStatusId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(14, 6276837032950008885),
        relationTarget: 'SupplierStatusEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3632915326898435017),
        name: 'accountPayableId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(15, 584888389082887871),
        relationTarget: 'AccountPayableEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 2785688640523433071),
    name: 'SupplierStatusEntity',
    lastPropertyId: const obx_int.IdUid(2, 5302495174415267958),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3067996228733748025),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5302495174415267958),
        name: 'description',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 3396796113457010509),
    name: 'VendorEntity',
    lastPropertyId: const obx_int.IdUid(4, 6761294511810807030),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1382913317834969337),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8424831429456606604),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7857793002247590512),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6761294511810807030),
        name: 'password',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(11, 3396796113457010509),
    lastIndexId: const obx_int.IdUid(15, 584888389082887871),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountPayableEntity: obx_int.EntityDefinition<AccountPayableEntity>(
      model: _entities[0],
      toOneRelations: (AccountPayableEntity object) => [
        object.supplier,
        object.bulkSale,
        object.status,
      ],
      toManyRelations: (AccountPayableEntity object) => {},
      getId: (AccountPayableEntity object) => object.id,
      setId: (AccountPayableEntity object, int id) {
        object.id = id;
      },
      objectToFB: (AccountPayableEntity object, fb.Builder fbb) {
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.paid);
        fbb.addInt64(2, object.supplier.targetId);
        fbb.addInt64(3, object.bulkSale.targetId);
        fbb.addInt64(4, object.status.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final paidParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = AccountPayableEntity(id: idParam, paid: paidParam);
        object.supplier.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.supplier.attach(store);
        object.bulkSale.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.bulkSale.attach(store);
        object.status.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.status.attach(store);
        return object;
      },
    ),
    BulkSaleEntity: obx_int.EntityDefinition<BulkSaleEntity>(
      model: _entities[1],
      toOneRelations: (BulkSaleEntity object) => [
        object.customer,
        object.vendor,
        object.status,
      ],
      toManyRelations: (BulkSaleEntity object) => {},
      getId: (BulkSaleEntity object) => object.id,
      setId: (BulkSaleEntity object, int id) {
        object.id = id;
      },
      objectToFB: (BulkSaleEntity object, fb.Builder fbb) {
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.paid);
        fbb.addInt64(2, object.customer.targetId);
        fbb.addInt64(3, object.vendor.targetId);
        fbb.addInt64(4, object.status.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final paidParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = BulkSaleEntity(id: idParam, paid: paidParam);
        object.customer.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.customer.attach(store);
        object.vendor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.vendor.attach(store);
        object.status.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.status.attach(store);
        return object;
      },
    ),
    CustomerEntity: obx_int.EntityDefinition<CustomerEntity>(
      model: _entities[2],
      toOneRelations: (CustomerEntity object) => [],
      toManyRelations: (CustomerEntity object) => {},
      getId: (CustomerEntity object) => object.id,
      setId: (CustomerEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CustomerEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = CustomerEntity(id: idParam, name: nameParam);

        return object;
      },
    ),
    ProductEntity: obx_int.EntityDefinition<ProductEntity>(
      model: _entities[3],
      toOneRelations: (ProductEntity object) => [],
      toManyRelations: (ProductEntity object) => {},
      getId: (ProductEntity object) => object.id,
      setId: (ProductEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ProductEntity object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final categoryOffset = fbb.writeString(object.category);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.code);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, categoryOffset);
        fbb.addFloat64(4, object.donation);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final codeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final donationParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object = ProductEntity(
          id: idParam,
          code: codeParam,
          title: titleParam,
          category: categoryParam,
          donation: donationParam,
        );

        return object;
      },
    ),
    SaleHistoryEntity: obx_int.EntityDefinition<SaleHistoryEntity>(
      model: _entities[4],
      toOneRelations: (SaleHistoryEntity object) => [
        object.bulkSale,
        object.previousStatus,
        object.subsequentStatus,
      ],
      toManyRelations: (SaleHistoryEntity object) => {},
      getId: (SaleHistoryEntity object) => object.id,
      setId: (SaleHistoryEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SaleHistoryEntity object, fb.Builder fbb) {
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.date.millisecondsSinceEpoch);
        fbb.addInt64(2, object.bulkSale.targetId);
        fbb.addInt64(3, object.previousStatus.targetId);
        fbb.addInt64(4, object.subsequentStatus.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final object = SaleHistoryEntity(id: idParam, date: dateParam);
        object.bulkSale.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.bulkSale.attach(store);
        object.previousStatus.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.previousStatus.attach(store);
        object.subsequentStatus.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.subsequentStatus.attach(store);
        return object;
      },
    ),
    SaleStatusEntity: obx_int.EntityDefinition<SaleStatusEntity>(
      model: _entities[5],
      toOneRelations: (SaleStatusEntity object) => [],
      toManyRelations: (SaleStatusEntity object) => {},
      getId: (SaleStatusEntity object) => object.id,
      setId: (SaleStatusEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SaleStatusEntity object, fb.Builder fbb) {
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, descriptionOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = SaleStatusEntity(
          id: idParam,
          description: descriptionParam,
        );

        return object;
      },
    ),
    SingleSaleEntity: obx_int.EntityDefinition<SingleSaleEntity>(
      model: _entities[6],
      toOneRelations: (SingleSaleEntity object) => [
        object.product,
        object.bulkSale,
      ],
      toManyRelations: (SingleSaleEntity object) => {},
      getId: (SingleSaleEntity object) => object.id,
      setId: (SingleSaleEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SingleSaleEntity object, fb.Builder fbb) {
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.amount);
        fbb.addInt64(2, object.product.targetId);
        fbb.addInt64(3, object.bulkSale.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final amountParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = SingleSaleEntity(id: idParam, amount: amountParam);
        object.product.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.product.attach(store);
        object.bulkSale.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.bulkSale.attach(store);
        return object;
      },
    ),
    SupplierEntity: obx_int.EntityDefinition<SupplierEntity>(
      model: _entities[7],
      toOneRelations: (SupplierEntity object) => [],
      toManyRelations: (SupplierEntity object) => {},
      getId: (SupplierEntity object) => object.id,
      setId: (SupplierEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SupplierEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = SupplierEntity(id: idParam, name: nameParam);

        return object;
      },
    ),
    SupplierHistoryEntity: obx_int.EntityDefinition<SupplierHistoryEntity>(
      model: _entities[8],
      toOneRelations: (SupplierHistoryEntity object) => [
        object.previousStatus,
        object.subsequentStatus,
        object.accountPayable,
      ],
      toManyRelations: (SupplierHistoryEntity object) => {},
      getId: (SupplierHistoryEntity object) => object.id,
      setId: (SupplierHistoryEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SupplierHistoryEntity object, fb.Builder fbb) {
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.date.millisecondsSinceEpoch);
        fbb.addInt64(2, object.previousStatus.targetId);
        fbb.addInt64(3, object.subsequentStatus.targetId);
        fbb.addInt64(4, object.accountPayable.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final object = SupplierHistoryEntity(id: idParam, date: dateParam);
        object.previousStatus.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.previousStatus.attach(store);
        object.subsequentStatus.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.subsequentStatus.attach(store);
        object.accountPayable.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.accountPayable.attach(store);
        return object;
      },
    ),
    SupplierStatusEntity: obx_int.EntityDefinition<SupplierStatusEntity>(
      model: _entities[9],
      toOneRelations: (SupplierStatusEntity object) => [],
      toManyRelations: (SupplierStatusEntity object) => {},
      getId: (SupplierStatusEntity object) => object.id,
      setId: (SupplierStatusEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SupplierStatusEntity object, fb.Builder fbb) {
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, descriptionOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = SupplierStatusEntity(
          id: idParam,
          description: descriptionParam,
        );

        return object;
      },
    ),
    VendorEntity: obx_int.EntityDefinition<VendorEntity>(
      model: _entities[10],
      toOneRelations: (VendorEntity object) => [],
      toManyRelations: (VendorEntity object) => {},
      getId: (VendorEntity object) => object.id,
      setId: (VendorEntity object, int id) {
        object.id = id;
      },
      objectToFB: (VendorEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final usernameOffset = fbb.writeString(object.username);
        final passwordOffset = fbb.writeString(object.password);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, usernameOffset);
        fbb.addOffset(3, passwordOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = VendorEntity(
          id: idParam,
          name: nameParam,
          username: usernameParam,
          password: passwordParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountPayableEntity] entity fields to define ObjectBox queries.
class AccountPayableEntity_ {
  /// See [AccountPayableEntity.id].
  static final id = obx.QueryIntegerProperty<AccountPayableEntity>(
    _entities[0].properties[0],
  );

  /// See [AccountPayableEntity.paid].
  static final paid = obx.QueryDoubleProperty<AccountPayableEntity>(
    _entities[0].properties[1],
  );

  /// See [AccountPayableEntity.supplier].
  static final supplier =
      obx.QueryRelationToOne<AccountPayableEntity, SupplierEntity>(
        _entities[0].properties[2],
      );

  /// See [AccountPayableEntity.bulkSale].
  static final bulkSale =
      obx.QueryRelationToOne<AccountPayableEntity, CustomerEntity>(
        _entities[0].properties[3],
      );

  /// See [AccountPayableEntity.status].
  static final status =
      obx.QueryRelationToOne<AccountPayableEntity, SupplierStatusEntity>(
        _entities[0].properties[4],
      );
}

/// [BulkSaleEntity] entity fields to define ObjectBox queries.
class BulkSaleEntity_ {
  /// See [BulkSaleEntity.id].
  static final id = obx.QueryIntegerProperty<BulkSaleEntity>(
    _entities[1].properties[0],
  );

  /// See [BulkSaleEntity.paid].
  static final paid = obx.QueryDoubleProperty<BulkSaleEntity>(
    _entities[1].properties[1],
  );

  /// See [BulkSaleEntity.customer].
  static final customer =
      obx.QueryRelationToOne<BulkSaleEntity, CustomerEntity>(
        _entities[1].properties[2],
      );

  /// See [BulkSaleEntity.vendor].
  static final vendor = obx.QueryRelationToOne<BulkSaleEntity, VendorEntity>(
    _entities[1].properties[3],
  );

  /// See [BulkSaleEntity.status].
  static final status =
      obx.QueryRelationToOne<BulkSaleEntity, SaleStatusEntity>(
        _entities[1].properties[4],
      );
}

/// [CustomerEntity] entity fields to define ObjectBox queries.
class CustomerEntity_ {
  /// See [CustomerEntity.id].
  static final id = obx.QueryIntegerProperty<CustomerEntity>(
    _entities[2].properties[0],
  );

  /// See [CustomerEntity.name].
  static final name = obx.QueryStringProperty<CustomerEntity>(
    _entities[2].properties[1],
  );
}

/// [ProductEntity] entity fields to define ObjectBox queries.
class ProductEntity_ {
  /// See [ProductEntity.id].
  static final id = obx.QueryIntegerProperty<ProductEntity>(
    _entities[3].properties[0],
  );

  /// See [ProductEntity.code].
  static final code = obx.QueryIntegerProperty<ProductEntity>(
    _entities[3].properties[1],
  );

  /// See [ProductEntity.title].
  static final title = obx.QueryStringProperty<ProductEntity>(
    _entities[3].properties[2],
  );

  /// See [ProductEntity.category].
  static final category = obx.QueryStringProperty<ProductEntity>(
    _entities[3].properties[3],
  );

  /// See [ProductEntity.donation].
  static final donation = obx.QueryDoubleProperty<ProductEntity>(
    _entities[3].properties[4],
  );
}

/// [SaleHistoryEntity] entity fields to define ObjectBox queries.
class SaleHistoryEntity_ {
  /// See [SaleHistoryEntity.id].
  static final id = obx.QueryIntegerProperty<SaleHistoryEntity>(
    _entities[4].properties[0],
  );

  /// See [SaleHistoryEntity.date].
  static final date = obx.QueryDateProperty<SaleHistoryEntity>(
    _entities[4].properties[1],
  );

  /// See [SaleHistoryEntity.bulkSale].
  static final bulkSale =
      obx.QueryRelationToOne<SaleHistoryEntity, BulkSaleEntity>(
        _entities[4].properties[2],
      );

  /// See [SaleHistoryEntity.previousStatus].
  static final previousStatus =
      obx.QueryRelationToOne<SaleHistoryEntity, SaleStatusEntity>(
        _entities[4].properties[3],
      );

  /// See [SaleHistoryEntity.subsequentStatus].
  static final subsequentStatus =
      obx.QueryRelationToOne<SaleHistoryEntity, SaleStatusEntity>(
        _entities[4].properties[4],
      );
}

/// [SaleStatusEntity] entity fields to define ObjectBox queries.
class SaleStatusEntity_ {
  /// See [SaleStatusEntity.id].
  static final id = obx.QueryIntegerProperty<SaleStatusEntity>(
    _entities[5].properties[0],
  );

  /// See [SaleStatusEntity.description].
  static final description = obx.QueryStringProperty<SaleStatusEntity>(
    _entities[5].properties[1],
  );
}

/// [SingleSaleEntity] entity fields to define ObjectBox queries.
class SingleSaleEntity_ {
  /// See [SingleSaleEntity.id].
  static final id = obx.QueryIntegerProperty<SingleSaleEntity>(
    _entities[6].properties[0],
  );

  /// See [SingleSaleEntity.amount].
  static final amount = obx.QueryIntegerProperty<SingleSaleEntity>(
    _entities[6].properties[1],
  );

  /// See [SingleSaleEntity.product].
  static final product =
      obx.QueryRelationToOne<SingleSaleEntity, ProductEntity>(
        _entities[6].properties[2],
      );

  /// See [SingleSaleEntity.bulkSale].
  static final bulkSale =
      obx.QueryRelationToOne<SingleSaleEntity, BulkSaleEntity>(
        _entities[6].properties[3],
      );
}

/// [SupplierEntity] entity fields to define ObjectBox queries.
class SupplierEntity_ {
  /// See [SupplierEntity.id].
  static final id = obx.QueryIntegerProperty<SupplierEntity>(
    _entities[7].properties[0],
  );

  /// See [SupplierEntity.name].
  static final name = obx.QueryStringProperty<SupplierEntity>(
    _entities[7].properties[1],
  );
}

/// [SupplierHistoryEntity] entity fields to define ObjectBox queries.
class SupplierHistoryEntity_ {
  /// See [SupplierHistoryEntity.id].
  static final id = obx.QueryIntegerProperty<SupplierHistoryEntity>(
    _entities[8].properties[0],
  );

  /// See [SupplierHistoryEntity.date].
  static final date = obx.QueryDateProperty<SupplierHistoryEntity>(
    _entities[8].properties[1],
  );

  /// See [SupplierHistoryEntity.previousStatus].
  static final previousStatus =
      obx.QueryRelationToOne<SupplierHistoryEntity, SupplierStatusEntity>(
        _entities[8].properties[2],
      );

  /// See [SupplierHistoryEntity.subsequentStatus].
  static final subsequentStatus =
      obx.QueryRelationToOne<SupplierHistoryEntity, SupplierStatusEntity>(
        _entities[8].properties[3],
      );

  /// See [SupplierHistoryEntity.accountPayable].
  static final accountPayable =
      obx.QueryRelationToOne<SupplierHistoryEntity, AccountPayableEntity>(
        _entities[8].properties[4],
      );
}

/// [SupplierStatusEntity] entity fields to define ObjectBox queries.
class SupplierStatusEntity_ {
  /// See [SupplierStatusEntity.id].
  static final id = obx.QueryIntegerProperty<SupplierStatusEntity>(
    _entities[9].properties[0],
  );

  /// See [SupplierStatusEntity.description].
  static final description = obx.QueryStringProperty<SupplierStatusEntity>(
    _entities[9].properties[1],
  );
}

/// [VendorEntity] entity fields to define ObjectBox queries.
class VendorEntity_ {
  /// See [VendorEntity.id].
  static final id = obx.QueryIntegerProperty<VendorEntity>(
    _entities[10].properties[0],
  );

  /// See [VendorEntity.name].
  static final name = obx.QueryStringProperty<VendorEntity>(
    _entities[10].properties[1],
  );

  /// See [VendorEntity.username].
  static final username = obx.QueryStringProperty<VendorEntity>(
    _entities[10].properties[2],
  );

  /// See [VendorEntity.password].
  static final password = obx.QueryStringProperty<VendorEntity>(
    _entities[10].properties[3],
  );
}
